var smash={};smash.router={__parseRouteRegex:/{(.*?)}/gi,__dynamicParts:[],__routes:{static:[],dynamic:[]}},smash.router.add=function(t,r){var s=smash.router.parseRoute(t);return s.regex?(s.callback=r,smash.router.__routes.dynamic[s.depth]||(smash.router.__routes.dynamic[s.depth]=[]),smash.router.__routes.dynamic[s.depth][s.numVars]||(smash.router.__routes.dynamic[s.depth][s.numVars]=[]),void smash.router.__routes.dynamic[s.depth][s.numVars].push(s)):void(smash.router.__routes.static[t]=r)},smash.router.set=function(t){window.history.pushState("","",t),window.dispatchEvent(new Event("popstate"))},smash.router.redirect=function(t){window.location=t},smash.router.handleNotFound=function(t){console.log("route: "+JSON.stringify(t)+" does not exist")},smash.router.run=function(){window.onpopstate=function(t){smash.router.execute()},smash.router.execute()},smash.router.execute=function(){var t=this.getPath();if(this.__routes.static[t.path])return void this.__routes.static[t.path]();var r=t.path.split("/").length-1;if(this.__routes.dynamic[r]){var s,e,a={};for(var o in this.__routes.dynamic[r])for(var n in this.__routes.dynamic[r][o]){var s=this.__routes.dynamic[r][o][n];if(e=t.path.match(s.regex)){for(var u=0;u<s.numVars;u++)a[s.vars[u]]=e[u+1];return void s.callback(a)}}}smash.router.handleNotFound(t)},smash.router.getPath=function(){var t=document.createElement("a");return t.href=window.location,{host:t.hostname,path:t.pathname}},smash.router.parseRoute=function(t){"/"!=t.substring(0,1)&&(t="/"+t),"/"==t.substring(t.length-2)&&(t="/"+t);var r={path:t,depth:t.split("/").length-1,vars:[],numVars:0};if(smash.router.__dynamicParts=t.match(smash.router.__parseRouteRegex),void 0!=smash.router.__dynamicParts&&null!=smash.router.__dynamicParts){for(var s="^"+t.replace(/\//gi,"\\/")+"$",e=0;e<smash.router.__dynamicParts.length;e++)r.numVars++,r.vars.push(smash.router.__dynamicParts[e].substring(1,smash.router.__dynamicParts[e].length-1)),s=s.replace(smash.router.__dynamicParts[e],"(.*?)");r.regex=new RegExp(s,"i")}return r};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
